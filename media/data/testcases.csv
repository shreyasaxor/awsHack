Verify if a user will be able to login with a valid username and valid password.
Verify if a user cannot login with a valid username and an invalid password.
"Verify the login page for both, when the field is blank and Submit button is clicked."
Verify the ‘Forgot Password’ functionality.
Verify the messages for invalid login.
Verify the ‘Remember Me’ functionality.
Verify if the data in password field is either visible as asterisk or bullet signs.
Verify if a user is able to login with a new password only after he/she has changed the password.
Verify if the login page allows to log in simultaneously with different credentials in a different browser.
Verify if the ‘Enter’ key of the keyboard is working correctly on the login page.
Other Test Cases
Verify the time taken to log in with a valid username and password.
"Verify if the font, text color, and color coding of the Login page is as per the standard."
Verify if there is a ‘Cancel’ button available to erase the entered text.
Verify the login page and all its controls in different browsers
Verify if a user cannot enter the characters more than the specified range in each field (Username and Password).
Verify if a user cannot enter the characters more than the specified range in each field (Username and Password).
Verify the login page by pressing ‘Back button’ of the browser. It should not allow you to enter into the system once you log out.
Verify the timeout functionality of the login session.
Verify if a user should not be allowed to log in with different credentials from the same browser at the same time.
Verify if a user should be able to login with the same credentials in different browsers at the same time.
Verify the Login page against SQL injection attack.
Verify the implementation of SSL certificate.
All mandatory fields should be validated and indicated by an asterisk (*) symbol.
Validation error messages should be displayed properly in the correct position.
"All error messages should be displayed in the same CSS style (For Example, using red color)"
"General confirmation messages should be displayed using CSS style other than error messages style (For Example, using green color)"
Tooltips text should be meaningful.
Drop-down fields should have the first entry as blank or text like ‘Select'.
‘Delete functionality' for any record on a page should ask for a confirmation.
Select/deselect all records option should be provided if page supports record add/delete/update functionality
Amount values should be displayed with correct currency symbols.
Default page sorting should be provided.
Reset button functionality should set default values for all fields.
All numeric values should be formatted properly.
Input fields should be checked for the max field value. Input values greater than the specified max limit should not be accepted or stored in the database.
Check all input fields for special characters.
Field labels should be standard e.g. field accepting user's first name should be labeled properly as ‘First Name'.
Check page sorting functionality after add/edit/delete operations on any record.
Check for timeout functionality. Timeout values should be configurable. Check application behavior after the operation timeout.
Check cookies used in an application.
Check if downloadable files are pointing to the correct file paths.
All resource keys should be configurable in config files or database instead of hard coding.
Standard conventions should be followed throughout for naming resource keys.
Validate markup for all web pages (validate HTML and CSS for syntax errors) to make sure it is compliant with the standards.
Application crash or unavailable pages should be redirected to the error page.
Check the text on all pages for spelling and grammatical errors.
Check numeric input fields with character input values. A proper validation message should appear.
Check for negative numbers if allowed for numeric fields.
Check the number of fields with decimal number values.
Check the functionality of buttons available on all pages.
The user should not be able to submit a page twice by pressing the submit button in quick succession.
Divide by zero errors should be handled for any calculations.
Input data with the first and last position blank should be handled correctly.
"All fields on a page (For Example, text box, radio options, drop-down lists) should be aligned properly."
Numeric values should be justified correctly unless specified otherwise.
"Enough space should be provided between field labels, columns, rows, error messages, etc."
The scrollbar should be enabled only when necessary.
"Font size, style, and color for headline, description text, labels, infield data, and grid info should be standard as specified in SRS."
The description text box should be multi-lined.
Disabled fields should be greyed out and users should not be able to set focus on these fields.
"Upon click of an input text field, the mouse arrow pointer should get changed to the cursor."
The user should not be able to type in drop-down select lists.
Information filled by users should remain intact when there is an error message on page submit. The user should be able to submit the form again by correcting the errors.
Check if proper field labels are used in error messages.
Drop-down field values should be displayed in defined sort order.
Tab and Shift+Tab order should work properly.
Default radio options should be pre-selected on the page load.
Field-specific and page-level help messages should be available.
Check if the correct fields are highlighted in case of errors.
Check if the drop-down list options are readable and not truncated due to field size limits.
All buttons on a page should be accessible by keyboard shortcuts and the user should be able to perform all operations using a keyboard.
Check all pages for broken images.
Check all pages for broken links.
All pages should have a title.
Confirmation messages should be displayed before performing any update or delete operation.
Hourglass should be displayed when the application is busy.
Page text should be left-justified.
The user should be able to select only one radio option and any combination for checkboxes.
The user should be able to filter results using all parameters on the page.
Refine search functionality should load the search page with all user-selected search parameters.
"When there are at least one filter criteria required to perform the search operation, make sure the proper error message is displayed when the user submits the page without selecting any filter criteria."
"When at least one filter criteria selection is not compulsory, the user should be able to submit the page and the default search criteria should get used to query results."
Proper validation messages should be displayed for all invalid values for filter criteria.
Check if the default window size is correct.
Check if the child window size is correct.
"Check if there is any field on the page with default focus (in general, the focus should be set on the first input field of the screen)."
Check if child windows are getting closed on closing parent/opener window.
"If the child window is opened, the user should not be able to use or update any field in the background or parent window"
"Check window minimize, maximize, and close functionality."
Check if the window is re-sizable.
Check scroll bar functionality for parent and child windows.
Check cancel button functionality for the child window.
Check if correct data is getting saved in the database upon a successful page submit.
Check values for columns that are not accepting null values.
Check for data integrity. Data should be stored in single or multiple tables based on the design.
Index names should be given as per the standards e.g. IND_<Tablename>_<ColumnName>
Tables should have a primary key column.
"Table columns should have description information available (except for audit columns like created date, created by, etc.)"
For every database add/update operation log should be added.
Required table indexes should be created.
Check if data is committed to the database only when the operation is successfully completed.
Data should be rolled back in case of failed transactions.
"Database name should be given as per the application type i.e. test, UAT, sandbox, live (though this is not a standard it is helpful for database maintenance)"
Database logical names should be given according to the database name (again this is not standard but helpful for DB maintenance).
Stored procedures should not be named with a prefix “sp_”
"Check if values for table audit columns (like created date, created by, updated, updated by, is deleted, deleted data, deleted by, etc.) are populated properly."
Check if input data is not truncated while saving. Field length shown to the user on the page and in database schema should be the same.
"Check numeric fields with minimum, maximum, and float values."
Check numeric fields with negative values (for both acceptance and non-acceptance).
Check if the radio button and drop-down list options are saved correctly in the database.
Check if the database fields are designed with the correct data type and data length.
"Check if all the table constraints like a Primary key, Foreign key, etc. are implemented correctly."
Test stored procedures and triggers with sample input data.
Input field leading and trailing spaces should be truncated before committing data to the database.
Null values should not be allowed for the Primary key column.
Check for uploaded image path.
Check image upload and change functionality.
"Check image upload functionality with image files of different extensions (For Example, JPEG, PNG, BMP, etc.)"
Check image upload functionality with images having space or any other allowed special character in the file name.
Check duplicate name image upload.
Check image upload with image size greater than the max allowed size. The Proper error message should be displayed.
"Check image upload functionality with file types other than images (For Example, txt, doc, pdf, exe, etc.). A proper error message should be displayed."
Check if images of specified height and width (if defined) are accepted otherwise rejected.
The image upload progress bar should appear for large size images.
Check if the cancel button functionality is working in between the upload process.
Check if file selection dialog shows only supported files listed.
Check multiple images upload functionality.
Check image quality after upload. Image quality should not be changed after upload.
Check if the user is able to use/view the uploaded images.
The email template should use standard CSS for all emails.
Email addresses should be validated before sending emails.
Special characters in the email body template should be handled properly.
"Language-specific characters (For Example, Russian, Chinese or German language characters) should be handled properly in the email body template."
Email subject should not be blank.
Placeholder fields used in the email template should be replaced with actual values e.g. {Firstname} {Lastname} should be replaced with an individual's first and last name properly for all the recipients.
If reports with dynamic values are included in the email body and report data should be calculated correctly.
Email sender name should not be blank.
"Emails should be checked in different email clients like Outlook, Gmail, Hotmail, Yahoo! mail, etc."
"Check to send email functionality using TO, CC and BCC fields."
Check plain text emails.
Check HTML format emails.
"Check email header and footer for company logo, privacy policy, and other links."
Check emails with attachments.
"Check to send email functionality to single, multiple or distribution list recipients."
Check if a reply to the email address is correct.
Check to send the high volume of emails.
The file should get exported in the proper file extension.
"The file name for the exported Excel file should be as per the standards, For Example, if the file name is using the timestamp, it should get replaced properly with an actual timestamp at the time of exporting the file."
Check for date format if exported Excel file contains the date columns.
Check number formatting for numeric or currency values. Formatting should be the same as shown on the page.
The exported file should have columns with proper column names.
Default page sorting should be carried in the exported file as well.
"Excel file data should be formatted properly with header and footer text, date, page numbers, etc. values for all pages."
Check if the data displayed on a page and exported Excel file is the same.
Check export functionality when pagination is enabled.
"Check if the export button is showing proper icon according to the exported file type, For Example, Excel file icon for xls files"
Check export functionality for files with very large size.
Check export functionality for pages containing special characters. Check if these special characters are exported properly in the Excel file.
Check if the page load time is within the acceptable range.
Check the page load on slow connections.
"Check the response time for any action under a light, normal, moderate, and heavy load conditions."
Check the performance of database stored procedures and triggers.
Check the database query execution time.
Check for load testing of the application.
Check for the Stress testing of the application.
Check CPU and memory usage under peak load conditions.
Check for SQL injection attacks.
Secure pages should use the HTTPS protocol.
Page crash should not reveal application or server info. The error page should be displayed for this.
Escape special characters in the input.
Error messages should not reveal any sensitive information.
All credentials should be transferred over an encrypted channel.
Test password security and password policy enforcement.
Check application logout functionality.
Check for Brute Force Attacks.
Cookie information should be stored in encrypted format only.
Check session cookie duration and session termination after timeout or logout.
Session tokens should be transmitted over a secured channel.
The password should not be stored in cookies.
Test for Denial of Service attacks.
Test for memory leakage.
Test unauthorized application access by manipulating variable values in the browser address bar.
Test file extension handing so that exe files are not uploaded and executed on the server.
Sensitive fields like passwords and credit card information should not have to autocomplete enabled.
File upload functionality should use file type restrictions and also anti-virus for scanning uploaded files.
Check if directory listing is prohibited.
Passwords and other sensitive fields should be masked while typing.
Check if forgot password functionality is secured with features like temporary password expiry after specified hours and security question is asked before changing or requesting a new password.
Verify CAPTCHA functionality.
Check if important events are logged in log files.
Check if access privileges are implemented correctly.
